@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

@function str-replace($string, $search, $replace) {
  $searchLength: str-length($search);
  $length: str-length($replace);
  $index: str-index($string, $search);
  // @warn "Index of " + $search + " in a " + $string + " is "+ $index;
  $slice: $string;
  @while $index != 0 and type-of($index) == number {
    $slice: str-slice($slice, 0, $index - 1); //B
    $slice: $slice + $replace; //Bbox
    $slice: $slice + str-slice($string, $index + $searchLength);
    $index: str-index($slice, $search);
    // @warn "Index of "+$search+" in a " + $slice + " is " + $index;
  }
  @return $slice;
}

// Generate new selector with certain properties
//
// $selectorName: 'Px-xs';
// $properties: ('padding-left': 0.5em, 'padding-right': 0.5em);
//
@mixin createSelector($selectorName, $properties) {
    .#{$selectorName} {
        @each $property, $value in $properties {
            #{$property}: $value;
        }
    }
}

// $selectorNamePrefix: 'Px';
// $selectorGeneratorIds: 'xs', 'sm', 'md', 'lg', 'xl' !default;
@function generateMultipleSelectors($selectorNamePrefix, $selectorGeneratorIds) {
    $selectors: ();
    @each $id in $selectorGeneratorIds {
        $selectors: map-merge($selectors, $selectorNamePrefix + '-' + $id);
    }

    @return $selectors; // $selectors: ('xs': 'Px-xs', 'sm': 'Px-sm'...)
}

// Generate multiple classes with specific properties
//
// Ideal:
// callFunction('Px', ('sm': 0.5em, 'md': 1em), ('padding-left', 'padding-right'));
// callFunction('Bt', ('sm': 1px, 'md': 2px), ('border-top-width'));
// callFunction('Mx', $spacerSizes, ('margin-left', 'margin-right'));
//
@mixin createMultipleSizeClasses($selectorPrefix, $sizes, $properties) {
    @each $sizeName, $size in $sizes {
        $values: ();
        @each $property in $properties {
            $values: map-merge($values, ($property: $size));
        }

        @include createSelector($selectorPrefix + '-' + $sizeName, $values);
    }
}

// @include createMultipleSizeBoxClasses('B{dirKey}', $borderSizes, 'border-{dir}-width');
// createMultipleSizeBoxClasses('P{dirKey}', $sizes, 'padding-{dir}');
@mixin createMultipleSizeBoxClasses($selectorName, $sizes, $cssProperty) {
    @each $dirKey, $dirProperties in $dirs {
        $newSelector: str-replace($selectorName, '{dirKey}', $dirKey);
        // @warn "new selector is " + $newSelector + " with dirKey " + $dirKey;
        $properties: ();

        @each $property in $dirProperties {
            $newProperty: str-replace($cssProperty, '{dir}', $property);
            $properties: append($properties, $newProperty);
        }

        @include createMultipleSizeClasses($newSelector, $sizes, $properties);
    }
}

@mixin createMultipleBoxClasses($selectorName, $cssProperties) {
    @each $dirKey, $dirSelection in $dirs {
        $newSelector: str-replace($selectorName, '{dirKey}', $dirKey);
        $properties: ();

        @each $dir in $dirSelection {
            @each $prop, $value in $cssProperties {
                $newProperty: str-replace($prop, '{dir}', $dir);
                $properties: map-merge($properties, ($newProperty: $value));
            }
        }

        @include createSelector($newSelector, $properties);
    }
}